- name: Create target directories
  hosts: localhost
  tasks:
  - name: Remove any previously generated certificates
    file: state=absent path=target/istio/pki/
  - name: Ensure PKI directory exists
    file: state=directory path=target/istio/pki/
  - name: Ensure PKI directory exists
    file: state=directory path=target/istio/bin/

- name: Check and receive CA from master node
  hosts: masters
  user: "{{ remote_user }}"
  become: yes
  tasks:
  - name: Check master for CA cert
    stat:
      path: /etc/kubernetes/pki/ca.pem
    register: ca

  - name: Fetch ca.pem
    fetch:
      src: /etc/kubernetes/pki/ca.pem
      dest: target/istio/pki/
      flat: yes
    when: ca.stat.exists
  
  - name: Fetch ca-key.pem
    fetch:
      src: /etc/kubernetes/pki/ca-key.pem
      dest: target/istio/pki/
      flat: yes
    when: ca.stat.exists

- name: Generate certificates
  hosts: localhost
  tasks:
  - name: Generate istio-ingress-csr.json
    template: src=templates/istio/istio-ingress-csr.json.j2 dest=target/istio/pki/istio-ingress-csr.json
  
  - name: Creating istio-ingress certificate
    shell: bin/cfssl gencert -ca=target/istio/pki/ca.pem -ca-key=target/istio/pki/ca-key.pem -config=target/pki/ca-config.json -profile=server target/istio/pki/istio-ingress-csr.json | bin/cfssljson -bare target/istio/pki/istio-ingress
    args:
      creates: target/istio/pki/istio-ingress.pem
   
  - name: Creating istio-sidecar-injector certificate
    shell: bin/cfssl gencert -ca=target/istio/pki/ca.pem -ca-key=target/istio/pki/ca-key.pem -config=target/pki/ca-config.json -profile=server files/istio/istio-sidecar-injector-csr.json | bin/cfssljson -bare target/istio/pki/istio-sidecar-injector
    args:
      creates: target/istio/pki/istio-sidecar-injector.pem

- name: Copy kubeconfig from master
  hosts: masters
  user: "{{ remote_user }}"
  become: yes
  tasks:
  - name: fetch cluster-admin from master
    fetch: src=/etc/kubernetes/kubeconfigs/cluster-admin.conf dest=target/istio/kubeconfig flat=yes

- name: Create kubernetes resources
  hosts: localhost
  vars:
    kubectl: target/istio/bin/kubectl --kubeconfig target/istio/kubeconfig
  tasks:
  - name: Download kubernetes node binaries
    environment: "{{ proxy_env }}"
    shell: curl -L --insecure https://dl.k8s.io/v{{ k8s_version }}/kubernetes-node-linux-amd64.tar.gz | \
           tar xzf - -C /tmp kubernetes/node/bin/kubectl && \
           mv /tmp/kubernetes/node/bin/kubectl target/istio/bin/kubectl-{{ k8s_version }}
    args:
      creates: target/istio/bin/kubectl-{{k8s_version}}
 
  - name: Symlink kubernetes node binaries
    file: src=kubectl-{{ k8s_version }} dest=target/istio/bin/kubectl state=link force=yes

  - name: Patch istio.yaml
    template: src=templates/istio/istio.yaml.j2 dest=target/istio/istio.yaml

  - name: Install istio
    shell: "{{ kubectl }} apply -f target/istio/istio.yaml"
    register: matches_spec
    retries: 2
    delay: 10
    until: matches_spec.rc == 0
    changed_when: false

  - name: Set up istio-ingress-controller daemonset
    shell: "{{ kubectl }} apply -f files/istio/istio-ingress-controller.yaml"

  - name: Install istio-sidecar-configmap
    shell: "{{ kubectl }} apply -f files/istio/istio-sidecar-injector-configmap-release.yaml"

  - name: Adding istio-sidecar-injector certificate secret
    shell: "{{ kubectl }} create secret generic sidecar-injector-certs --from-file=key.pem=target/istio/pki/istio-sidecar-injector-key.pem --from-file=cert.pem=target/istio/pki/istio-sidecar-injector.pem --dry-run -o yaml | {{ kubectl }} -n istio-system apply -f -"
    ignore_errors: yes

  - name: Adding istio-ingress certificate secret
    shell: "{{ kubectl }} create -n istio-system secret tls istio-ingress-certs --key target/istio/pki/istio-ingress-key.pem --cert target/istio/pki/istio-ingress.pem"
    ignore_errors: yes

  - name: Reading and encoding CA certificate bundle from file
    shell: cat target/istio/pki/ca.pem | base64 | tr -d '\n'
    register: ca_bundle

  - name: Patch istio-sidecar-injector deployment
    template: src=templates/istio/istio-sidecar-injector.yaml.j2 dest=target/istio/istio-sidecar-injector-with-ca-bundle.yaml

  - name: Install istio-sidecar-injector
    shell: "{{ kubectl }} apply -f target/istio/istio-sidecar-injector-with-ca-bundle.yaml"
 
  - name: Ensure egress directory exists
    file: state=directory path=target/istio/egress

  - name: Create egress yaml files
    shell: "cat templates/istio/egress-domains.yaml.j2 | sed -e 's|\\${domain}|{{ item }}|g' > target/istio/egress/{{ item }}-egress.yaml"
    with_items: "{{ egress_domains.split(',') }}"
    register: matches_spec
    retries: 2
    delay: 10
    until: matches_spec.rc == 0
    changed_when: false

  - name: Whitelist domains via Egress
    shell: "{{ kubectl }} apply -f target/istio/egress/"

  - name: Patch Zipkin yaml
    template: src=templates/istio/zipkin.yaml.j2 dest=target/istio/zipkin.yaml

  - name: Install Zipkin
    shell: "{{ kubectl }} apply -f target/istio/zipkin.yaml"

  - name: Patch Servicegraph yaml
    template: src=templates/istio/servicegraph.yaml.j2 dest=target/istio/servicegraph.yaml

  - name: Install Servicegraph
    shell: "{{ kubectl }} apply -f target/istio/servicegraph.yaml"
