---
- hosts: etcd
  user: "{{ remote_user }}"
  become: yes
  roles:
    - etcd

- hosts: masters
  user: "{{ remote_user }}"
  become: yes
  tasks:
  - name: take backup of etcd
    shell: /usr/bin/etcdctl snapshot save /tmp/backup.db
    environment:
      - ETCDCTL_API: 3
  - name: fetch backup
    fetch:
      src: /tmp/backup.db 
      dest: target/
      flat: yes
#  - name: retrieve flannel configuration
#    shell: /usr/bin/etcdctl ls /nais/network/subnets --recursive -p | grep -v '/$' | xargs -n 1 -I% sh -c 'echo -n %" "; etcdctl get %;'
#    environment:
#      - ETCDCTL_API: 2
#    register: flannel_output
#    tags:
#      - dev
#  - name: store fact
#    set_fact:
#      flannel_configuration: "{{ flannel_output.stdout }}"
#    tags:
#    - dev

- hosts: etcd
  user: "{{ remote_user }}"
  become: yes
  tasks:

  - name: copy backup
    copy: src=target/backup.db dest=/tmp

  - name: stop etcd
    systemd:
      name=etcd
      state=stopped

  - name: remove old data dir
    file: path=/var/lib/etcd state=absent

  - name: restore backup
    shell: /usr/bin/etcdctl snapshot restore /tmp/backup.db \
           --name {{ ansible_hostname }} \
           --initial-advertise-peer-urls http://{{ ansible_default_ipv4.address }}:2380 \
           --initial-cluster {{ hostvars[groups['etcd'][0]]['ansible_hostname'] }}=http://{{hostvars[groups['etcd'][0]]['ansible_default_ipv4']['address']}}:2380,{{ hostvars[groups['etcd'][1]]['ansible_hostname'] }}=http://{{hostvars[groups['etcd'][1]]['ansible_default_ipv4']['address']}}:2380,{{ hostvars[groups['etcd'][2]]['ansible_hostname'] }}=http://{{hostvars[groups['etcd'][2]]['ansible_default_ipv4']['address']}}:2380 \
           --initial-cluster-token {{ cluster_name }}-etcd
           --data-dir /var/lib/etcd
    environment:
      - ETCDCTL_API: 3

  - name: start etcd
    systemd:
      name=etcd
      state=started

- hosts: etcd[0]
  user: "{{ remote_user }}"
  become: yes
  tasks:
  - name: Check if flannel config exists (OK if this fails)
    shell: /usr/bin/etcdctl ls /nais/network/config
    environment:
      - ETCDCTL_API: 2
    register: flannelconfig
    ignore_errors: yes
    tags:
    - dev
  - name: Set flannel configuration in etcd
    shell: '/usr/bin/etcdctl mkdir /nais/network && /usr/bin/etcdctl mkdir /nais/network/subnets \
           && /usr/bin/etcdctl mk /nais/network/config  "{ \"Network\": \"{{ pod_network_cidr }}\", \"SubnetLen\": 23, \"Backend\": { \"Type\": \"vxlan\" }}"'
    environment:
      - ETCDCTL_API: 2
    when: flannelconfig.rc != 0
    tags:
    - dev

#  - name: Set subnet configuration in etcd
#    shell: echo -e "{{ hostvars[groups['masters'][0]]['flannel_configuration'] }}" | xargs -i@ etcdctl mk @
#    environment:
#      - ETCDCTL_API: 2
#    tags:
#      - dev
- hosts: masters
  user: "{{ remote_user }}"
  become: yes
  tasks:
  - name: Copy manifests and kubeconfigs
    template: src=templates/manifests/kube-apiserver.yaml.j2 dest=/etc/kubernetes/manifests/kube-apiserver.yaml
  - name: restart kubelet
    systemd:
      name=kubelet
      state=restarted
