---
# Common initialization play (webproxy, certificates, repositories)
- hosts: all
  tags:
    - test
  user: deployer
  become: yes
  roles:
    - common

- hosts: masters
  tags:
      - test
  user: deployer
  roles:
    - fetch_existing_certificates

- hosts: localhost
  tags:
      - test
  roles:
    - create_certificates

# Configure kubernetes Master node
- hosts: masters
  user: deployer
  become: yes
  roles: 
    - etcd

  tasks:
  - name: Ensure PKI directory exists on master
    file: state=directory path=/etc/kubernetes/pki

  - name: Copy certificates
    copy: src=target/pki/{{ item }} dest=/etc/kubernetes/pki/
    with_items:
      - admin.pem
      - admin-key.pem
      - ca.pem
      - ca-key.pem
      - kube-apiserver-kubelet-client-key.pem
      - kube-apiserver-kubelet-client.pem
      - kube-apiserver-server-key.pem
      - kube-apiserver-server.pem
      - sa.key
      - sa.pub

  - name: Ensure manifests directory exists on master
    file: state=directory path=/etc/kubernetes/manifests

  - name: Copy kubelet service manifest
    copy: src=files/master-kubelet.service dest=/etc/systemd/system/kubelet.service

  - name: Ensure kubectl is installed
    environment: "{{ proxy_env }}"
    yum: name=kubectl state=latest
  
  - name: Copy API server pod description
    file: src=files/kubectl-config dest=/root/.kube/config

  - name: Enable kubelet
    systemd:
      daemon_reload=yes
      name=kubelet
      state=restarted
      enabled=yes

  - name: Check if flannel config exists (OK if this fails)
    shell: /usr/bin/etcdctl ls /nais/network/config
    register: flannelconfig
    ignore_errors: yes
    tags:
      - dev

  - name: Set flannel configuration in etcd
    shell: "/usr/bin/etcdctl mkdir /nais/network && \
           /usr/bin/etcdctl mk /nais/network/config \"{ 'Network': '{{ pod_network_cidr }}', 'SubnetLen': 23, 'Backend': { 'Type': 'vxlan' } }\""
    tags:
      - dev
    when: flannelconfig.rc != 0

  - name: Copy API server pod description
    template: src=templates/kube-apiserver.yaml.j2 dest=/etc/kubernetes/manifests/kube-apiserver.yaml
  
  - name: Copy scheduler configuration file
    template: src=templates/kube-scheduler.conf.j2 dest=/etc/kubernetes/kube-scheduler.conf

  - name: Copy scheduler pod description
    template: src=templates/kube-scheduler.yaml.j2 dest=/etc/kubernetes/manifests/kube-scheduler.yaml

  - name: Copy controller manager kubeconfig
    template: src=templates/kube-controller-manager.conf.j2 dest=/etc/kubernetes/kube-controller-manager.conf

  - name: Copy controller-manager pod description
    template: src=templates/kube-controller-manager.yaml.j2 dest=/etc/kubernetes/manifests/kube-controller-manager.yaml

  - name: Restart docker
    service: name=docker state=restarted


# Configure workers
- hosts: workers
  user: deployer
  become: yes
  tasks:
  
  - name: Copy certificates
    copy: src=target/pki/{{ item }} dest=/etc/kubernetes/pki/ # to ensure idempotency
    with_items:
      - admin.pem
      - admin-key.pem
      - ca.pem

  - name: Copy kubelet service manifest
    template: src=templates/worker-kubelet.service.j2 dest=/etc/systemd/system/kubelet.service

  - name: Copy controller manager kubeconfig
    template: src=templates/kubelet.conf.j2 dest=/etc/kubernetes/kubelet.conf

  - name: Enable kubelet
    systemd:
      daemon_reload=yes
      name=kubelet
      state=restarted
      enabled=yes

  - name: Download kube-proxy binaries # using curl as get_url gave protocol error (most likely caused by internal webproxy)
    environment: "{{ proxy_env }}"
    shell: curl --insecure https://storage.googleapis.com/kubernetes-release/release/v{{ k8s_version }}/bin/linux/amd64/kube-proxy > /usr/bin/kube-proxy
    args:
      creates: /usr/bin/kube-proxy

  - name: Make kube-proxy executable
    file: path=/usr/bin/kube-proxy mode=0755

  - name: Copy kube-proxy service file
    template: src=templates/kube-proxy.service.j2 dest=/etc/systemd/system/kube-proxy.service

  - name: Copy kube-proxy kubeconfig
    template: src=templates/kube-proxy.conf.j2 dest=/etc/kubernetes/kube-proxy.conf

  - name: Enable kube-proxy
    systemd:
      daemon_reload=yes
      name=kube-proxy
      state=restarted
      enabled=yes

  - name: Download flannel binaries # using curl as get_url gave protocol error (most likely caused by internal webproxy)
    environment: "{{ proxy_env }}"
    shell: curl -L --insecure https://github.com/coreos/flannel/releases/download/v{{flannel_version}}/flannel-v{{flannel_version}}-linux-amd64.tar.gz | \
           tar xzf - -C /tmp flanneld && \
           mv /tmp/flanneld /usr/bin/flanneld-{{flannel_version}}
    args:
      creates: /usr/bin/flanneld-{{flannel_version}}

  - name: Symlink flannel
    file: src=/usr/bin/flanneld-{{flannel_version}} dest=/usr/bin/flanneld state=link

  - name: Copy flannel service file
    template: src=templates/flannel.service.j2 dest=/etc/systemd/system/flannel.service

  - name: Enable flannel
    systemd:
      daemon_reload=yes
      name=flannel
      state=restarted
      enabled=yes
